{
  "remainingRequest": "/Users/carlossantiago/Dropbox/_Local/Github/slack-chat/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/carlossantiago/Dropbox/_Local/Github/slack-chat/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":false,\"typescript\":true,\"parseProps\":false}]],\"plugins\":[[\"/Users/carlossantiago/Dropbox/_Local/Github/slack-chat/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/carlossantiago/Dropbox/_Local/Github/slack-chat/node_modules/react-hot-loader/babel.js\"],\"cacheDirectory\":true,\"babelrc\":false}!/Users/carlossantiago/Dropbox/_Local/Github/slack-chat/node_modules/react-docgen-typescript-loader/dist/index.js!/Users/carlossantiago/Dropbox/_Local/Github/slack-chat/src/containers/ChatRooms/ChatRooms.tsx",
  "dependencies": [
    {
      "path": "/Users/carlossantiago/Dropbox/_Local/Github/slack-chat/src/containers/ChatRooms/ChatRooms.tsx",
      "mtime": 1541782994582
    },
    {
      "path": "/Users/carlossantiago/Dropbox/_Local/Github/slack-chat/node_modules/docz-core/node_modules/cache-loader/dist/cjs.js",
      "mtime": 1541429074980
    },
    {
      "path": "/Users/carlossantiago/Dropbox/_Local/Github/slack-chat/node_modules/docz-core/node_modules/babel-loader/lib/index.js",
      "mtime": 1538779637905
    },
    {
      "path": "/Users/carlossantiago/Dropbox/_Local/Github/slack-chat/node_modules/react-docgen-typescript-loader/dist/index.js",
      "mtime": 1541429075984
    }
  ],
  "contextDependencies": [],
  "result": [
    "var _jsxFileName = \"/Users/carlossantiago/Dropbox/_Local/Github/slack-chat/src/containers/ChatRooms/ChatRooms.tsx\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\n * ChatRooms container\n *\n * Handles most of the app, controls all messages and chatrooms coming from\n * firebase\n */\nimport * as React from \"react\";\nimport * as Immutable from \"immutable\";\nimport RoomsList from \"../../components/RoomsList/RoomsList\";\nimport MessageList from \"../../components/MessageList/MessageList\";\nimport CreateChatRoom from \"../../components/CreateChatRoom/CreateChatRoom\";\nimport CreateMessage from \"../../components/CreateMessage/CreateMessage\";\nimport ProfileCard from \"../../components/ProfileCard/ProfileCard\";\nimport \"./ChatRooms.scss\";\n\nvar Rooms =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Rooms, _React$Component);\n\n  function Rooms(props) {\n    var _this;\n\n    _classCallCheck(this, Rooms);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Rooms).call(this, props));\n\n    _this.handleChatRoomName = function (event) {\n      _this.setState({\n        createNewRoomTitle: String(\"\".concat(event.target.value))\n      });\n    };\n\n    _this.getChatRoomsFromFirebase = function (snapshot) {\n      var data = _this.state.data;\n      var room = snapshot.val();\n      room.key = snapshot.key;\n\n      _this.setState({\n        data: data.update(\"rooms\", function (list) {\n          return list.push(room);\n        })\n      });\n    };\n\n    _this.getMessagesFromFirebase = function (snapshot) {\n      var data = _this.state.data;\n      var chatMessage = snapshot.val();\n      chatMessage.key = snapshot.key;\n\n      _this.setState({\n        data: data.update(\"messages\", function (list) {\n          return list.push(chatMessage);\n        })\n      });\n    };\n\n    _this.disconnectMessagesFromFirebase = function (snapshot) {\n      var data = _this.state.data;\n\n      _this.setState({\n        data: data.update(\"messages\", function (list) {\n          return list.filter(function (message) {\n            return message.key !== snapshot.key;\n          });\n        })\n      });\n    };\n\n    _this.disconnectChatRoomsFromFirebase = function (snapshot) {\n      var data = _this.state.data; // resets the local available chat rooms\n      // after we delete it\n\n      _this.setState({\n        data: data.update(\"rooms\", function (list) {\n          return list.filter(function (room) {\n            return room.key !== snapshot.key;\n          });\n        })\n      });\n    };\n\n    _this.handleRemoveRoomFromFirebase = function (event, chatRoom) {\n      var firebaseRooms = _this.state.firebaseRooms;\n      event.preventDefault();\n      firebaseRooms.child(\"\".concat(chatRoom)).remove();\n    };\n\n    _this.handleRemoveMessageFromFirebase = function (event, messageName) {\n      var firebaseMessages = _this.state.firebaseMessages;\n      event.preventDefault();\n      firebaseMessages.child(\"\".concat(messageName)).remove();\n    };\n\n    _this.scrollToEndOfMessages = function (span) {\n      _this.scrollToEndOfMessages = span;\n\n      _this.handleMessageContainer(_this.scrollToEndOfMessages);\n    };\n\n    _this.handleMessageContainer = function (element) {\n      setTimeout(function () {\n        element.scrollIntoView({\n          behavior: \"smooth\"\n        });\n      }, 10);\n    };\n\n    _this.handleSendMessageToFirebase = function (event) {\n      var _this$state = _this.state,\n          data = _this$state.data,\n          firebaseMessages = _this$state.firebaseMessages,\n          newMessage = _this$state.newMessage;\n      var _this$props = _this.props,\n          displayImage = _this$props.displayImage,\n          displayName = _this$props.displayName,\n          firebase = _this$props.firebase,\n          userUniqueID = _this$props.userUniqueID;\n      event.preventDefault(); // avoid sending empty message to firebase\n\n      var isEnabled = newMessage.length > 0; // message information sent to firebase\n\n      var sendNewMessage = {\n        avatar: displayImage,\n        content: newMessage,\n        roomId: data.getIn([\"activeRoom\", \"key\"]),\n        sentAt: firebase.database.ServerValue.TIMESTAMP,\n        userId: userUniqueID,\n        username: displayName\n      };\n\n      if (isEnabled) {\n        // resets input field to be empty again\n        _this.setState({\n          newMessage: String(\"\") // call back used to push the message to firebase after state changes\n\n        }, function () {\n          return firebaseMessages.push(sendNewMessage);\n        });\n      }\n    };\n\n    _this.handleMessageContent = function (event) {\n      _this.setState({\n        newMessage: String(\"\".concat(event.target.value))\n      });\n    };\n\n    _this.sendChatRoomDataToFirebase = function (event) {\n      // sends chat room information to firebase\n      var _this$state2 = _this.state,\n          firebaseRooms = _this$state2.firebaseRooms,\n          createNewRoomTitle = _this$state2.createNewRoomTitle;\n      var _this$props2 = _this.props,\n          displayName = _this$props2.displayName,\n          userUniqueID = _this$props2.userUniqueID;\n      event.preventDefault(); // chatroom information sent to firebase\n\n      var chatRoomDetails = {\n        // TODO: add more useful information to improve UX\n        createdBy: displayName,\n        name: createNewRoomTitle,\n        userId: userUniqueID\n      };\n\n      _this.setState({\n        /* clears state and sends chat room data to Firebase */\n        createNewRoomTitle: String(\"\") // call back used to push the chatroom to firebase after state changes\n\n      }, function () {\n        return firebaseRooms.push(chatRoomDetails);\n      });\n    };\n\n    _this.state = {\n      createNewRoomTitle: String(\"\"),\n      data: Immutable.Map({\n        activeRoom: Immutable.Map({\n          key: String(\"\"),\n          name: String(\"\")\n        }),\n        messages: Immutable.List(),\n        rooms: Immutable.List()\n      }),\n      firebaseMessages: _this.props.firebase.database().ref(\"messages\"),\n      firebaseRooms: _this.props.firebase.database().ref(\"rooms\"),\n      newMessage: String(\"\")\n    };\n    return _this;\n  }\n\n  _createClass(Rooms, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // connects to firebase as event listeners\n      var _this$state3 = this.state,\n          firebaseRooms = _this$state3.firebaseRooms,\n          firebaseMessages = _this$state3.firebaseMessages;\n      firebaseRooms.on(\"child_added\", this.getChatRoomsFromFirebase);\n      firebaseRooms.on(\"child_removed\", this.disconnectChatRoomsFromFirebase);\n      firebaseMessages.on(\"child_added\", this.getMessagesFromFirebase);\n      firebaseMessages.on(\"child_removed\", this.disconnectMessagesFromFirebase);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.handleMessageContainer(this.scrollToEndOfMessages);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$state4 = this.state,\n          firebaseRooms = _this$state4.firebaseRooms,\n          firebaseMessages = _this$state4.firebaseMessages; // disconnect firebase from the app, funky stuff happens (state gets all funky) if removed\n\n      firebaseRooms.off(\"child_added\", this.getChatRoomsFromFirebase);\n      firebaseRooms.off(\"child_removed\", this.disconnectChatRoomsFromFirebase);\n      firebaseMessages.off(\"child_added\", this.getMessagesFromFirebase);\n      firebaseMessages.off(\"child_removed\", this.disconnectMessagesFromFirebase);\n    } // sets a room to active from the list of rooms given by firebase\n\n  }, {\n    key: \"setActiveRoom\",\n    value: function setActiveRoom(chatRoomDetails) {\n      var data = this.state.data;\n      this.setState({\n        data: data.setIn([\"activeRoom\", \"name\"], chatRoomDetails.name).setIn([\"activeRoom\", \"key\"], chatRoomDetails.key)\n      });\n    } // sets name of chat room to be created\n\n  }, {\n    key: \"renderChatRooms\",\n\n    /**\n     * Renders below are to break down the UI/app to make it easier to\n     * refactor and update. Each functionality is abstracted to it's own function\n     *\n     */\n    // only renders the chatrooms based on logic coming from state\n    value: function renderChatRooms() {\n      var _this2 = this;\n\n      var data = this.state.data;\n      var userUniqueID = this.props.userUniqueID;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, data.get(\"rooms\").map(function (room) {\n        return React.createElement(RoomsList, {\n          key: room.key // props\n          ,\n          createdBy: room.displayName,\n          currentUserId: userUniqueID,\n          deleteRoom: function deleteRoom(event) {\n            _this2.handleRemoveRoomFromFirebase(event, room.key);\n          },\n          name: room.name,\n          setActiveRoom: function setActiveRoom() {\n            _this2.setActiveRoom(room);\n\n            _this2.handleMessageContainer(_this2.scrollToEndOfMessages);\n          },\n          userId: room.userId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        });\n      }));\n    } // only renders the renderCreateChatRooms based on logic coming from state\n\n  }, {\n    key: \"renderCreateChatRooms\",\n    value: function renderCreateChatRooms() {\n      var _this3 = this;\n\n      /* input field to create a chat room */\n      var createNewRoomTitle = this.state.createNewRoomTitle; // if text field is empty, disable the button\n\n      var isEnabled = createNewRoomTitle.length > 0;\n      return React.createElement(CreateChatRoom, {\n        isDisabled: !isEnabled // TODO: rethink on how to incorporate without Lambda\n        // Lambdas are forbidden in JSX attributes due to their rendering performance impact\n        ,\n        handleChange: function handleChange(event) {\n          return _this3.handleChatRoomName(event);\n        },\n        handleSubmit: function handleSubmit(event) {\n          return _this3.sendChatRoomDataToFirebase(event);\n        },\n        value: createNewRoomTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      });\n    } // only renders the active room and the messages associated with it based on what\n    // active room is set on the state\n\n  }, {\n    key: \"renderActiveRoomsAndMessages\",\n    value: function renderActiveRoomsAndMessages() {\n      var _this4 = this;\n\n      var data = this.state.data;\n      var userUniqueID = this.props.userUniqueID;\n      var currentRoomId = data.getIn([\"activeRoom\", \"key\"]);\n      return (// if we have a current room, render it with the messages\n        React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286\n          },\n          __self: this\n        }, !currentRoomId ? // TODO: create a component\n        React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289\n          },\n          __self: this\n        }, \"Please select a room!\") : // renders all messages associated with the roomID\n        data.get(\"messages\").map(function (message) {\n          return [currentRoomId === message.roomId && React.createElement(MessageList, {\n            key: message.roomId + 1 // props\n            ,\n            avatar: message.avatar,\n            currentUser: userUniqueID,\n            content: message.content,\n            deleteMessage: function deleteMessage(event) {\n              _this4.handleRemoveMessageFromFirebase(event, message.key);\n            },\n            id: message.roomId + 1,\n            sentAt: message.sentAt,\n            userId: message.userId,\n            username: message.username,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 294\n            },\n            __self: this\n          })];\n        }))\n      );\n    } // main render function of the app\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var _this$state5 = this.state,\n          data = _this$state5.data,\n          newMessage = _this$state5.newMessage;\n      return React.createElement(\"main\", {\n        className: \"chatrooms-container\",\n        role: \"main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, React.createElement(\"aside\", {\n        className: \"chatrooms-container__side-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, React.createElement(ProfileCard, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      })), React.createElement(\"article\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, this.renderCreateChatRooms()), React.createElement(\"article\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, this.renderChatRooms())), React.createElement(\"section\", {\n        className: \"chatrooms-container__main-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"chatrooms-container__chatroom-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, data.getIn([\"activeRoom\", \"name\"]))), React.createElement(\"section\", {\n        className: \"message-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, this.renderActiveRoomsAndMessages(), React.createElement(\"span\", {\n        ref: function ref(span) {\n          _this5.scrollToEndOfMessages = span;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      })), data.getIn([\"activeRoom\", \"key\"]).length > 0 && React.createElement(CreateMessage // TODO: rethink on how to incorporate without Lambda\n      // Lambdas are forbidden in JSX attributes due to their\n      // rendering performance impact\n      , {\n        handleChange: function handleChange(event) {\n          return _this5.handleMessageContent(event);\n        },\n        handleSubmit: function handleSubmit(event) {\n          return _this5.handleSendMessageToFirebase(event);\n        },\n        placeholder: \"Send a message to '\".concat(data.getIn([\"activeRoom\", \"name\"]), \"'\"),\n        value: newMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return Rooms;\n}(React.Component);\n\nvar _default = Rooms;\nexport default _default;\n\ntry {\n  // @ts-ignore\n  Rooms.displayName = \"Rooms\"; // @ts-ignore\n\n  Rooms.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"Rooms\",\n    \"props\": {\n      \"avatar\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"avatar\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"displayImage\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"displayImage\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"displayName\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"displayName\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"firebase\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"firebase\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"any\"\n        }\n      },\n      \"name\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"name\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"logout\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"logout\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"any\"\n        }\n      },\n      \"userUniqueID\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"userUniqueID\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/containers/ChatRooms/ChatRooms.tsx#Rooms\"] = {\n      docgenInfo: Rooms.__docgenInfo,\n      name: \"Rooms\",\n      path: \"src/containers/ChatRooms/ChatRooms.tsx#Rooms\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}\n\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Rooms, \"Rooms\", \"/Users/carlossantiago/Dropbox/_Local/Github/slack-chat/src/containers/ChatRooms/ChatRooms.tsx\");\n  reactHotLoader.register(_default, \"default\", \"/Users/carlossantiago/Dropbox/_Local/Github/slack-chat/src/containers/ChatRooms/ChatRooms.tsx\");\n  leaveModule(module);\n})();\n\n;",
    {
      "version": 3,
      "sources": [
        "/Users/carlossantiago/Dropbox/_Local/Github/slack-chat/src/containers/ChatRooms/ChatRooms.tsx"
      ],
      "names": [
        "React",
        "Immutable",
        "RoomsList",
        "MessageList",
        "CreateChatRoom",
        "CreateMessage",
        "ProfileCard",
        "Rooms",
        "props",
        "handleChatRoomName",
        "event",
        "setState",
        "createNewRoomTitle",
        "String",
        "target",
        "value",
        "getChatRoomsFromFirebase",
        "snapshot",
        "data",
        "state",
        "room",
        "val",
        "key",
        "update",
        "list",
        "push",
        "getMessagesFromFirebase",
        "chatMessage",
        "disconnectMessagesFromFirebase",
        "filter",
        "message",
        "disconnectChatRoomsFromFirebase",
        "handleRemoveRoomFromFirebase",
        "chatRoom",
        "firebaseRooms",
        "preventDefault",
        "child",
        "remove",
        "handleRemoveMessageFromFirebase",
        "messageName",
        "firebaseMessages",
        "scrollToEndOfMessages",
        "span",
        "handleMessageContainer",
        "element",
        "setTimeout",
        "scrollIntoView",
        "behavior",
        "handleSendMessageToFirebase",
        "newMessage",
        "displayImage",
        "displayName",
        "firebase",
        "userUniqueID",
        "isEnabled",
        "length",
        "sendNewMessage",
        "avatar",
        "content",
        "roomId",
        "getIn",
        "sentAt",
        "database",
        "ServerValue",
        "TIMESTAMP",
        "userId",
        "username",
        "handleMessageContent",
        "sendChatRoomDataToFirebase",
        "chatRoomDetails",
        "createdBy",
        "name",
        "Map",
        "activeRoom",
        "messages",
        "List",
        "rooms",
        "ref",
        "on",
        "off",
        "setIn",
        "get",
        "map",
        "setActiveRoom",
        "currentRoomId",
        "renderCreateChatRooms",
        "renderChatRooms",
        "renderActiveRoomsAndMessages",
        "Component",
        "__docgenInfo",
        "STORYBOOK_REACT_CLASSES",
        "docgenInfo",
        "path",
        "__react_docgen_typescript_loader_error"
      ],
      "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAOA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,WAA3B;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AACA,OAAOC,cAAP,MAA2B,gDAA3B;AACA,OAAOC,aAAP,MAA0B,8CAA1B;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AACA,OAAO,kBAAP;;IAoBMC,K;;;;;AACJ,iBAAYC,KAAZ,EAA8B;AAAA;;AAAA;;AAC5B,+EAAMA,KAAN;;AAD4B,UAoD9BC,kBApD8B,GAoDT,UAACC,KAAD,EAAgB;AACnC,YAAKC,QAAL,CAAc;AAAEC,QAAAA,kBAAkB,EAAEC,MAAM,WAAIH,KAAK,CAACI,MAAN,CAAaC,KAAjB;AAA5B,OAAd;AACD,KAtD6B;;AAAA,UAyD9BC,wBAzD8B,GAyDH,UAACC,QAAD,EAAmB;AAAA,UACpCC,IADoC,GAC3B,MAAKC,KADsB,CACpCD,IADoC;AAE5C,UAAME,IAAI,GAAGH,QAAQ,CAACI,GAAT,EAAb;AACAD,MAAAA,IAAI,CAACE,GAAL,GAAWL,QAAQ,CAACK,GAApB;;AAEA,YAAKX,QAAL,CAAc;AACZO,QAAAA,IAAI,EAAEA,IAAI,CAACK,MAAL,CAAY,OAAZ,EAAqB,UAACC,IAAD;AAAA,iBAAUA,IAAI,CAACC,IAAL,CAAUL,IAAV,CAAV;AAAA,SAArB;AADM,OAAd;AAGD,KAjE6B;;AAAA,UAoE9BM,uBApE8B,GAoEJ,UAACT,QAAD,EAAmB;AAAA,UACnCC,IADmC,GAC1B,MAAKC,KADqB,CACnCD,IADmC;AAE3C,UAAMS,WAAW,GAAGV,QAAQ,CAACI,GAAT,EAApB;AACAM,MAAAA,WAAW,CAACL,GAAZ,GAAkBL,QAAQ,CAACK,GAA3B;;AAEA,YAAKX,QAAL,CAAc;AACZO,QAAAA,IAAI,EAAEA,IAAI,CAACK,MAAL,CAAY,UAAZ,EAAwB,UAACC,IAAD;AAAA,iBAAUA,IAAI,CAACC,IAAL,CAAUE,WAAV,CAAV;AAAA,SAAxB;AADM,OAAd;AAGD,KA5E6B;;AAAA,UA+E9BC,8BA/E8B,GA+EG,UAACX,QAAD,EAAmB;AAAA,UAC1CC,IAD0C,GACjC,MAAKC,KAD4B,CAC1CD,IAD0C;;AAGlD,YAAKP,QAAL,CAAc;AACZO,QAAAA,IAAI,EAAEA,IAAI,CAACK,MAAL,CAAY,UAAZ,EAAwB,UAACC,IAAD;AAAA,iBAC5BA,IAAI,CAACK,MAAL,CAAY,UAACC,OAAD;AAAA,mBAAkBA,OAAO,CAACR,GAAR,KAAgBL,QAAQ,CAACK,GAA3C;AAAA,WAAZ,CAD4B;AAAA,SAAxB;AADM,OAAd;AAKD,KAvF6B;;AAAA,UA0F9BS,+BA1F8B,GA0FI,UAACd,QAAD,EAAmB;AAAA,UAC3CC,IAD2C,GAClC,MAAKC,KAD6B,CAC3CD,IAD2C,EAEnD;AACA;;AACA,YAAKP,QAAL,CAAc;AACZO,QAAAA,IAAI,EAAEA,IAAI,CAACK,MAAL,CAAY,OAAZ,EAAqB,UAACC,IAAD;AAAA,iBACzBA,IAAI,CAACK,MAAL,CAAY,UAACT,IAAD;AAAA,mBAAeA,IAAI,CAACE,GAAL,KAAaL,QAAQ,CAACK,GAArC;AAAA,WAAZ,CADyB;AAAA,SAArB;AADM,OAAd;AAKD,KAnG6B;;AAAA,UAsG9BU,4BAtG8B,GAsGC,UAACtB,KAAD,EAAauB,QAAb,EAA+B;AAAA,UACpDC,aADoD,GAClC,MAAKf,KAD6B,CACpDe,aADoD;AAE5DxB,MAAAA,KAAK,CAACyB,cAAN;AACAD,MAAAA,aAAa,CAACE,KAAd,WAAuBH,QAAvB,GAAmCI,MAAnC;AACD,KA1G6B;;AAAA,UA6G9BC,+BA7G8B,GA6GI,UAAC5B,KAAD,EAAa6B,WAAb,EAAkC;AAAA,UAC1DC,gBAD0D,GACrC,MAAKrB,KADgC,CAC1DqB,gBAD0D;AAElE9B,MAAAA,KAAK,CAACyB,cAAN;AACAK,MAAAA,gBAAgB,CAACJ,KAAjB,WAA0BG,WAA1B,GAAyCF,MAAzC;AACD,KAjH6B;;AAAA,UAoH9BI,qBApH8B,GAoHN,UAACC,IAAD,EAAe;AACrC,YAAKD,qBAAL,GAA6BC,IAA7B;;AACA,YAAKC,sBAAL,CAA4B,MAAKF,qBAAjC;AACD,KAvH6B;;AAAA,UA2H9BE,sBA3H8B,GA2HL,UAACC,OAAD,EAAkB;AACzCC,MAAAA,UAAU,CAAC,YAAM;AACfD,QAAAA,OAAO,CAACE,cAAR,CAAuB;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAAvB;AACD,OAFS,EAEP,EAFO,CAAV;AAGD,KA/H6B;;AAAA,UAiI9BC,2BAjI8B,GAiIA,UAACtC,KAAD,EAAgB;AAAA,wBACG,MAAKS,KADR;AAAA,UACpCD,IADoC,eACpCA,IADoC;AAAA,UAC9BsB,gBAD8B,eAC9BA,gBAD8B;AAAA,UACZS,UADY,eACZA,UADY;AAAA,wBAEkB,MAAKzC,KAFvB;AAAA,UAEpC0C,YAFoC,eAEpCA,YAFoC;AAAA,UAEtBC,WAFsB,eAEtBA,WAFsB;AAAA,UAETC,QAFS,eAETA,QAFS;AAAA,UAECC,YAFD,eAECA,YAFD;AAI5C3C,MAAAA,KAAK,CAACyB,cAAN,GAJ4C,CAM5C;;AACA,UAAMmB,SAAS,GAAGL,UAAU,CAACM,MAAX,GAAoB,CAAtC,CAP4C,CAS5C;;AACA,UAAMC,cAAc,GAAG;AACrBC,QAAAA,MAAM,EAAEP,YADa;AAErBQ,QAAAA,OAAO,EAAET,UAFY;AAGrBU,QAAAA,MAAM,EAAEzC,IAAI,CAAC0C,KAAL,CAAW,CAAC,YAAD,EAAe,KAAf,CAAX,CAHa;AAIrBC,QAAAA,MAAM,EAAET,QAAQ,CAACU,QAAT,CAAkBC,WAAlB,CAA8BC,SAJjB;AAKrBC,QAAAA,MAAM,EAAEZ,YALa;AAMrBa,QAAAA,QAAQ,EAAEf;AANW,OAAvB;;AASA,UAAIG,SAAJ,EAAe;AACb;AACA,cAAK3C,QAAL,CACE;AACEsC,UAAAA,UAAU,EAAEpC,MAAM,CAAC,EAAD,CADpB,CAEE;;AAFF,SADF,EAKE;AAAA,iBAAY2B,gBAAgB,CAACf,IAAjB,CAAsB+B,cAAtB,CAAZ;AAAA,SALF;AAOD;AACF,KA9J6B;;AAAA,UAiK9BW,oBAjK8B,GAiKP,UAACzD,KAAD,EAAgB;AACrC,YAAKC,QAAL,CAAc;AAAEsC,QAAAA,UAAU,EAAEpC,MAAM,WAAIH,KAAK,CAACI,MAAN,CAAaC,KAAjB;AAApB,OAAd;AACD,KAnK6B;;AAAA,UAqK9BqD,0BArK8B,GAqKD,UAAC1D,KAAD,EAAgB;AAC3C;AAD2C,yBAEG,MAAKS,KAFR;AAAA,UAEnCe,aAFmC,gBAEnCA,aAFmC;AAAA,UAEpBtB,kBAFoB,gBAEpBA,kBAFoB;AAAA,yBAGL,MAAKJ,KAHA;AAAA,UAGnC2C,WAHmC,gBAGnCA,WAHmC;AAAA,UAGtBE,YAHsB,gBAGtBA,YAHsB;AAI3C3C,MAAAA,KAAK,CAACyB,cAAN,GAJ2C,CAM3C;;AACA,UAAMkC,eAAe,GAAG;AACtB;AACAC,QAAAA,SAAS,EAAEnB,WAFW;AAGtBoB,QAAAA,IAAI,EAAE3D,kBAHgB;AAItBqD,QAAAA,MAAM,EAAEZ;AAJc,OAAxB;;AAOA,YAAK1C,QAAL,CACE;AACE;AACAC,QAAAA,kBAAkB,EAAEC,MAAM,CAAC,EAAD,CAF5B,CAGE;;AAHF,OADF,EAME;AAAA,eAAYqB,aAAa,CAACT,IAAd,CAAmB4C,eAAnB,CAAZ;AAAA,OANF;AAQD,KA3L6B;;AAE5B,UAAKlD,KAAL,GAAa;AACXP,MAAAA,kBAAkB,EAAEC,MAAM,CAAC,EAAD,CADf;AAEXK,MAAAA,IAAI,EAAEjB,SAAS,CAACuE,GAAV,CAAc;AAClBC,QAAAA,UAAU,EAAExE,SAAS,CAACuE,GAAV,CAAc;AACxBlD,UAAAA,GAAG,EAAET,MAAM,CAAC,EAAD,CADa;AAExB0D,UAAAA,IAAI,EAAE1D,MAAM,CAAC,EAAD;AAFY,SAAd,CADM;AAKlB6D,QAAAA,QAAQ,EAAEzE,SAAS,CAAC0E,IAAV,EALQ;AAMlBC,QAAAA,KAAK,EAAE3E,SAAS,CAAC0E,IAAV;AANW,OAAd,CAFK;AAUXnC,MAAAA,gBAAgB,EAAE,MAAKhC,KAAL,CAAW4C,QAAX,CAAoBU,QAApB,GAA+Be,GAA/B,CAAmC,UAAnC,CAVP;AAWX3C,MAAAA,aAAa,EAAE,MAAK1B,KAAL,CAAW4C,QAAX,CAAoBU,QAApB,GAA+Be,GAA/B,CAAmC,OAAnC,CAXJ;AAYX5B,MAAAA,UAAU,EAAEpC,MAAM,CAAC,EAAD;AAZP,KAAb;AAF4B;AAgB7B;;;;wCAEmB;AAClB;AADkB,yBAE0B,KAAKM,KAF/B;AAAA,UAEVe,aAFU,gBAEVA,aAFU;AAAA,UAEKM,gBAFL,gBAEKA,gBAFL;AAGlBN,MAAAA,aAAa,CAAC4C,EAAd,CAAiB,aAAjB,EAAgC,KAAK9D,wBAArC;AACAkB,MAAAA,aAAa,CAAC4C,EAAd,CAAiB,eAAjB,EAAkC,KAAK/C,+BAAvC;AACAS,MAAAA,gBAAgB,CAACsC,EAAjB,CAAoB,aAApB,EAAmC,KAAKpD,uBAAxC;AACAc,MAAAA,gBAAgB,CAACsC,EAAjB,CAAoB,eAApB,EAAqC,KAAKlD,8BAA1C;AACD;;;yCAEoB;AACnB,WAAKe,sBAAL,CAA4B,KAAKF,qBAAjC;AACD;;;2CAEsB;AAAA,yBACuB,KAAKtB,KAD5B;AAAA,UACbe,aADa,gBACbA,aADa;AAAA,UACEM,gBADF,gBACEA,gBADF,EAErB;;AACAN,MAAAA,aAAa,CAAC6C,GAAd,CAAkB,aAAlB,EAAiC,KAAK/D,wBAAtC;AACAkB,MAAAA,aAAa,CAAC6C,GAAd,CAAkB,eAAlB,EAAmC,KAAKhD,+BAAxC;AACAS,MAAAA,gBAAgB,CAACuC,GAAjB,CAAqB,aAArB,EAAoC,KAAKrD,uBAAzC;AACAc,MAAAA,gBAAgB,CAACuC,GAAjB,CAAqB,eAArB,EAAsC,KAAKnD,8BAA3C;AACD,K,CAED;;;;kCACcyC,e,EAAsB;AAAA,UAC1BnD,IAD0B,GACjB,KAAKC,KADY,CAC1BD,IAD0B;AAGlC,WAAKP,QAAL,CAAc;AACZO,QAAAA,IAAI,EAAEA,IAAI,CACP8D,KADG,CACG,CAAC,YAAD,EAAe,MAAf,CADH,EAC2BX,eAAe,CAACE,IAD3C,EAEHS,KAFG,CAEG,CAAC,YAAD,EAAe,KAAf,CAFH,EAE0BX,eAAe,CAAC/C,GAF1C;AADM,OAAd;AAKD,K,CAED;;;;;AA0IA;;;;;AAMA;sCACkB;AAAA;;AAAA,UACRJ,IADQ,GACC,KAAKC,KADN,CACRD,IADQ;AAAA,UAERmC,YAFQ,GAES,KAAK7C,KAFd,CAER6C,YAFQ;AAIhB,aACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGnC,IAAI,CAAC+D,GAAL,CAAS,OAAT,EAAkBC,GAAlB,CAAsB,UAAC9D,IAAD;AAAA,eACrB,oBAAC,SAAD;AACE,UAAA,GAAG,EAAEA,IAAI,CAACE,GADZ,CAEE;AAFF;AAGE,UAAA,SAAS,EAAEF,IAAI,CAAC+B,WAHlB;AAIE,UAAA,aAAa,EAAEE,YAJjB;AAKE,UAAA,UAAU,EAAE,oBAAC3C,KAAD,EAAgB;AAC1B,YAAA,MAAI,CAACsB,4BAAL,CAAkCtB,KAAlC,EAAyCU,IAAI,CAACE,GAA9C;AACD,WAPH;AAQE,UAAA,IAAI,EAAEF,IAAI,CAACmD,IARb;AASE,UAAA,aAAa,EAAE,yBAAM;AACnB,YAAA,MAAI,CAACY,aAAL,CAAmB/D,IAAnB;;AACA,YAAA,MAAI,CAACuB,sBAAL,CAA4B,MAAI,CAACF,qBAAjC;AACD,WAZH;AAaE,UAAA,MAAM,EAAErB,IAAI,CAAC6C,MAbf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADqB;AAAA,OAAtB,CADH,CADF;AAqBD,K,CAED;;;;4CACwB;AAAA;;AACtB;AADsB,UAEdrD,kBAFc,GAES,KAAKO,KAFd,CAEdP,kBAFc,EAGtB;;AACA,UAAM0C,SAAS,GAAG1C,kBAAkB,CAAC2C,MAAnB,GAA4B,CAA9C;AACA,aACE,oBAAC,cAAD;AACE,QAAA,UAAU,EAAE,CAACD,SADf,CAEE;AACA;AAHF;AAIE,QAAA,YAAY,EAAE,sBAAC5C,KAAD;AAAA,iBAAW,MAAI,CAACD,kBAAL,CAAwBC,KAAxB,CAAX;AAAA,SAJhB;AAKE,QAAA,YAAY,EAAE,sBAACA,KAAD;AAAA,iBAAW,MAAI,CAAC0D,0BAAL,CAAgC1D,KAAhC,CAAX;AAAA,SALhB;AAME,QAAA,KAAK,EAAEE,kBANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAUD,K,CAED;AACA;;;;mDAC+B;AAAA;;AAAA,UACrBM,IADqB,GACZ,KAAKC,KADO,CACrBD,IADqB;AAAA,UAErBmC,YAFqB,GAEJ,KAAK7C,KAFD,CAErB6C,YAFqB;AAG7B,UAAM+B,aAAa,GAAGlE,IAAI,CAAC0C,KAAL,CAAW,CAAC,YAAD,EAAe,KAAf,CAAX,CAAtB;AAEA,aACE;AACA,4BAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,CAACwB,aAAD,GACC;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAFD,GAIC;AACAlE,QAAAA,IAAI,CAAC+D,GAAL,CAAS,UAAT,EAAqBC,GAArB,CAAyB,UAACpD,OAAD;AAAA,iBAAkB,CACzCsD,aAAa,KAAKtD,OAAO,CAAC6B,MAA1B,IACE,oBAAC,WAAD;AACE,YAAA,GAAG,EAAE7B,OAAO,CAAC6B,MAAR,GAAiB,CADxB,CAEE;AAFF;AAGE,YAAA,MAAM,EAAE7B,OAAO,CAAC2B,MAHlB;AAIE,YAAA,WAAW,EAAEJ,YAJf;AAKE,YAAA,OAAO,EAAEvB,OAAO,CAAC4B,OALnB;AAME,YAAA,aAAa,EAAE,uBAAChD,KAAD,EAAgB;AAC7B,cAAA,MAAI,CAAC4B,+BAAL,CAAqC5B,KAArC,EAA4CoB,OAAO,CAACR,GAApD;AACD,aARH;AASE,YAAA,EAAE,EAAEQ,OAAO,CAAC6B,MAAR,GAAiB,CATvB;AAUE,YAAA,MAAM,EAAE7B,OAAO,CAAC+B,MAVlB;AAWE,YAAA,MAAM,EAAE/B,OAAO,CAACmC,MAXlB;AAYE,YAAA,QAAQ,EAAEnC,OAAO,CAACoC,QAZpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFuC,CAAlB;AAAA,SAAzB,CANJ;AAFF;AA6BD,K,CAED;;;;6BACS;AAAA;;AAAA,yBACsB,KAAK/C,KAD3B;AAAA,UACCD,IADD,gBACCA,IADD;AAAA,UACO+B,UADP,gBACOA,UADP;AAGP,aACE;AAAM,QAAA,SAAS,EAAC,qBAAhB;AAAsC,QAAA,IAAI,EAAC,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,SAAS,EAAC,qCAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,WAAD,oBAAiB,KAAKzC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAU,KAAK6E,qBAAL,EAAV,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAU,KAAKC,eAAL,EAAV,CAHF,CADF,EAME;AAAS,QAAA,SAAS,EAAC,qCAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,sCAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKpE,IAAI,CAAC0C,KAAL,CAAW,CAAC,YAAD,EAAe,MAAf,CAAX,CAAL,CADF,CADF,EAIE;AAAS,QAAA,SAAS,EAAC,mBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAK2B,4BAAL,EADH,EAEE;AACE,QAAA,GAAG,EAAE,aAAC7C,IAAD,EAAe;AAClB,UAAA,MAAI,CAACD,qBAAL,GAA6BC,IAA7B;AACD,SAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CAJF,EAYGxB,IAAI,CAAC0C,KAAL,CAAW,CAAC,YAAD,EAAe,KAAf,CAAX,EAAkCL,MAAlC,GAA2C,CAA3C,IACC,oBAAC,aAAD,CACE;AACA;AACA;AAHF;AAIE,QAAA,YAAY,EAAE,sBAAC7C,KAAD;AAAA,iBAAgB,MAAI,CAACyD,oBAAL,CAA0BzD,KAA1B,CAAhB;AAAA,SAJhB;AAKE,QAAA,YAAY,EAAE,sBAACA,KAAD;AAAA,iBACZ,MAAI,CAACsC,2BAAL,CAAiCtC,KAAjC,CADY;AAAA,SALhB;AAQE,QAAA,WAAW,+BAAwBQ,IAAI,CAAC0C,KAAL,CAAW,CAC5C,YAD4C,EAE5C,MAF4C,CAAX,CAAxB,MARb;AAYE,QAAA,KAAK,EAAEX,UAZT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbJ,CANF,CADF;AAsCD;;;;;;;;;;;EAlUiBjD,KAAK,CAACwF,S;;eAqUXjF,K;AAAf;;AACA,IAAI;AACA;AACAA,EAAAA,KAAK,CAAC4C,WAAN,GAAoB,OAApB,CAFA,CAGA;;AACA5C,EAAAA,KAAK,CAACkF,YAAN,GAAqB;AAAE,mBAAe,EAAjB;AAAqB,mBAAe,OAApC;AAA6C,aAAS;AAAE,gBAAU;AAAE,wBAAgB,IAAlB;AAAwB,uBAAe,EAAvC;AAA2C,gBAAQ,QAAnD;AAA6D,oBAAY,KAAzE;AAAgF,gBAAQ;AAAE,kBAAQ;AAAV;AAAxF,OAAZ;AAA4H,sBAAgB;AAAE,wBAAgB,IAAlB;AAAwB,uBAAe,EAAvC;AAA2C,gBAAQ,cAAnD;AAAmE,oBAAY,KAA/E;AAAsF,gBAAQ;AAAE,kBAAQ;AAAV;AAA9F,OAA5I;AAAkQ,qBAAe;AAAE,wBAAgB,IAAlB;AAAwB,uBAAe,EAAvC;AAA2C,gBAAQ,aAAnD;AAAkE,oBAAY,KAA9E;AAAqF,gBAAQ;AAAE,kBAAQ;AAAV;AAA7F,OAAjR;AAAsY,kBAAY;AAAE,wBAAgB,IAAlB;AAAwB,uBAAe,EAAvC;AAA2C,gBAAQ,UAAnD;AAA+D,oBAAY,KAA3E;AAAkF,gBAAQ;AAAE,kBAAQ;AAAV;AAA1F,OAAlZ;AAAigB,cAAQ;AAAE,wBAAgB,IAAlB;AAAwB,uBAAe,EAAvC;AAA2C,gBAAQ,MAAnD;AAA2D,oBAAY,KAAvE;AAA8E,gBAAQ;AAAE,kBAAQ;AAAV;AAAtF,OAAzgB;AAAunB,gBAAU;AAAE,wBAAgB,IAAlB;AAAwB,uBAAe,EAAvC;AAA2C,gBAAQ,QAAnD;AAA6D,oBAAY,KAAzE;AAAgF,gBAAQ;AAAE,kBAAQ;AAAV;AAAxF,OAAjoB;AAA8uB,sBAAgB;AAAE,wBAAgB,IAAlB;AAAwB,uBAAe,EAAvC;AAA2C,gBAAQ,cAAnD;AAAmE,oBAAY,KAA/E;AAAsF,gBAAQ;AAAE,kBAAQ;AAAV;AAA9F;AAA9vB;AAAtD,GAArB,CAJA,CAKA;;AACA,MAAI,OAAOC,uBAAP,KAAmC,WAAvC,EACI;AACAA,IAAAA,uBAAuB,CAAC,8CAAD,CAAvB,GAA0E;AAAEC,MAAAA,UAAU,EAAEpF,KAAK,CAACkF,YAApB;AAAkClB,MAAAA,IAAI,EAAE,OAAxC;AAAiDqB,MAAAA,IAAI,EAAE;AAAvD,KAA1E;AACP,CATD,CAUA,OAAOC,sCAAP,EAA+C,CAAG;;;;;;;;;;;;;0BAhV5CtF,K",
      "sourcesContent": [
        "/**\n * ChatRooms container\n *\n * Handles most of the app, controls all messages and chatrooms coming from\n * firebase\n */\n\nimport * as React from \"react\";\nimport * as Immutable from \"immutable\";\nimport RoomsList from \"../../components/RoomsList/RoomsList\";\nimport MessageList from \"../../components/MessageList/MessageList\";\nimport CreateChatRoom from \"../../components/CreateChatRoom/CreateChatRoom\";\nimport CreateMessage from \"../../components/CreateMessage/CreateMessage\";\nimport ProfileCard from \"../../components/ProfileCard/ProfileCard\";\nimport \"./ChatRooms.scss\";\n\ninterface IAppState {\n  createNewRoomTitle: string;\n  data: Immutable.Map<string, any>;\n  firebaseRooms?: any;\n  firebaseMessages?: any;\n  newMessage: string;\n}\n\ninterface IAppProps {\n  avatar?: string;\n  displayImage?: string;\n  displayName?: string;\n  firebase?: any;\n  name?: string;\n  logout?: any;\n  userUniqueID?: string;\n}\n\nclass Rooms extends React.Component<IAppProps, IAppState> {\n  constructor(props: IAppProps) {\n    super(props);\n    this.state = {\n      createNewRoomTitle: String(\"\"),\n      data: Immutable.Map({\n        activeRoom: Immutable.Map({\n          key: String(\"\"),\n          name: String(\"\")\n        }),\n        messages: Immutable.List(),\n        rooms: Immutable.List()\n      }),\n      firebaseMessages: this.props.firebase.database().ref(\"messages\"),\n      firebaseRooms: this.props.firebase.database().ref(\"rooms\"),\n      newMessage: String(\"\")\n    };\n  }\n\n  componentDidMount() {\n    // connects to firebase as event listeners\n    const { firebaseRooms, firebaseMessages } = this.state;\n    firebaseRooms.on(\"child_added\", this.getChatRoomsFromFirebase);\n    firebaseRooms.on(\"child_removed\", this.disconnectChatRoomsFromFirebase);\n    firebaseMessages.on(\"child_added\", this.getMessagesFromFirebase);\n    firebaseMessages.on(\"child_removed\", this.disconnectMessagesFromFirebase);\n  }\n\n  componentDidUpdate() {\n    this.handleMessageContainer(this.scrollToEndOfMessages);\n  }\n\n  componentWillUnmount() {\n    const { firebaseRooms, firebaseMessages } = this.state;\n    // disconnect firebase from the app, funky stuff happens (state gets all funky) if removed\n    firebaseRooms.off(\"child_added\", this.getChatRoomsFromFirebase);\n    firebaseRooms.off(\"child_removed\", this.disconnectChatRoomsFromFirebase);\n    firebaseMessages.off(\"child_added\", this.getMessagesFromFirebase);\n    firebaseMessages.off(\"child_removed\", this.disconnectMessagesFromFirebase);\n  }\n\n  // sets a room to active from the list of rooms given by firebase\n  setActiveRoom(chatRoomDetails: any) {\n    const { data } = this.state;\n\n    this.setState({\n      data: data\n        .setIn([\"activeRoom\", \"name\"], chatRoomDetails.name)\n        .setIn([\"activeRoom\", \"key\"], chatRoomDetails.key)\n    });\n  }\n\n  // sets name of chat room to be created\n  handleChatRoomName = (event: any) => {\n    this.setState({ createNewRoomTitle: String(`${event.target.value}`) });\n  };\n\n  // reads chatroom information from firebase and sets state\n  getChatRoomsFromFirebase = (snapshot: any) => {\n    const { data } = this.state;\n    const room = snapshot.val();\n    room.key = snapshot.key;\n\n    this.setState({\n      data: data.update(\"rooms\", (list) => list.push(room))\n    });\n  };\n\n  // reads messages information from firebase and sets state\n  getMessagesFromFirebase = (snapshot: any) => {\n    const { data } = this.state;\n    const chatMessage = snapshot.val();\n    chatMessage.key = snapshot.key;\n\n    this.setState({\n      data: data.update(\"messages\", (list) => list.push(chatMessage))\n    });\n  };\n\n  // stops reading messages from firebase when componentWillUnmount\n  disconnectMessagesFromFirebase = (snapshot: any) => {\n    const { data } = this.state;\n\n    this.setState({\n      data: data.update(\"messages\", (list) =>\n        list.filter((message: any) => message.key !== snapshot.key)\n      )\n    });\n  };\n\n  // stops reading chatrooms from firebase when componentWillUnmount\n  disconnectChatRoomsFromFirebase = (snapshot: any) => {\n    const { data } = this.state;\n    // resets the local available chat rooms\n    // after we delete it\n    this.setState({\n      data: data.update(\"rooms\", (list) =>\n        list.filter((room: any) => room.key !== snapshot.key)\n      )\n    });\n  };\n\n  // deletes chatroom data based on id from firebase\n  handleRemoveRoomFromFirebase = (event: any, chatRoom: any) => {\n    const { firebaseRooms } = this.state;\n    event.preventDefault();\n    firebaseRooms.child(`${chatRoom}`).remove();\n  };\n\n  // deletes message data based on id  from firebase\n  handleRemoveMessageFromFirebase = (event: any, messageName: any) => {\n    const { firebaseMessages } = this.state;\n    event.preventDefault();\n    firebaseMessages.child(`${messageName}`).remove();\n  };\n\n  // scrolls to the end of the container when a chatroom is selected\n  scrollToEndOfMessages = (span: any) => {\n    this.scrollToEndOfMessages = span;\n    this.handleMessageContainer(this.scrollToEndOfMessages);\n  };\n\n  // sets the element to where the app should scroll to\n  // scrolls to a span that is set after the messages\n  handleMessageContainer = (element: any) => {\n    setTimeout(() => {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }, 10);\n  };\n\n  handleSendMessageToFirebase = (event: any) => {\n    const { data, firebaseMessages, newMessage } = this.state;\n    const { displayImage, displayName, firebase, userUniqueID } = this.props;\n\n    event.preventDefault();\n\n    // avoid sending empty message to firebase\n    const isEnabled = newMessage.length > 0;\n\n    // message information sent to firebase\n    const sendNewMessage = {\n      avatar: displayImage,\n      content: newMessage,\n      roomId: data.getIn([\"activeRoom\", \"key\"]),\n      sentAt: firebase.database.ServerValue.TIMESTAMP,\n      userId: userUniqueID,\n      username: displayName\n    };\n\n    if (isEnabled) {\n      // resets input field to be empty again\n      this.setState(\n        {\n          newMessage: String(\"\")\n          // call back used to push the message to firebase after state changes\n        },\n        (): void => firebaseMessages.push(sendNewMessage)\n      );\n    }\n  };\n\n  // sets state to the new message that is about to be sent to firebase\n  handleMessageContent = (event: any) => {\n    this.setState({ newMessage: String(`${event.target.value}`) });\n  };\n\n  sendChatRoomDataToFirebase = (event: any) => {\n    // sends chat room information to firebase\n    const { firebaseRooms, createNewRoomTitle } = this.state;\n    const { displayName, userUniqueID } = this.props;\n    event.preventDefault();\n\n    // chatroom information sent to firebase\n    const chatRoomDetails = {\n      // TODO: add more useful information to improve UX\n      createdBy: displayName,\n      name: createNewRoomTitle,\n      userId: userUniqueID\n    };\n\n    this.setState(\n      {\n        /* clears state and sends chat room data to Firebase */\n        createNewRoomTitle: String(\"\")\n        // call back used to push the chatroom to firebase after state changes\n      },\n      (): void => firebaseRooms.push(chatRoomDetails)\n    );\n  };\n\n  /**\n   * Renders below are to break down the UI/app to make it easier to\n   * refactor and update. Each functionality is abstracted to it's own function\n   *\n   */\n\n  // only renders the chatrooms based on logic coming from state\n  renderChatRooms() {\n    const { data } = this.state;\n    const { userUniqueID } = this.props;\n\n    return (\n      <React.Fragment>\n        {data.get(\"rooms\").map((room: any) => (\n          <RoomsList\n            key={room.key}\n            // props\n            createdBy={room.displayName}\n            currentUserId={userUniqueID}\n            deleteRoom={(event: any) => {\n              this.handleRemoveRoomFromFirebase(event, room.key);\n            }}\n            name={room.name}\n            setActiveRoom={() => {\n              this.setActiveRoom(room);\n              this.handleMessageContainer(this.scrollToEndOfMessages);\n            }}\n            userId={room.userId}\n          />\n        ))}\n      </React.Fragment>\n    );\n  }\n\n  // only renders the renderCreateChatRooms based on logic coming from state\n  renderCreateChatRooms() {\n    /* input field to create a chat room */\n    const { createNewRoomTitle } = this.state;\n    // if text field is empty, disable the button\n    const isEnabled = createNewRoomTitle.length > 0;\n    return (\n      <CreateChatRoom\n        isDisabled={!isEnabled}\n        // TODO: rethink on how to incorporate without Lambda\n        // Lambdas are forbidden in JSX attributes due to their rendering performance impact\n        handleChange={(event) => this.handleChatRoomName(event)}\n        handleSubmit={(event) => this.sendChatRoomDataToFirebase(event)}\n        value={createNewRoomTitle}\n      />\n    );\n  }\n\n  // only renders the active room and the messages associated with it based on what\n  // active room is set on the state\n  renderActiveRoomsAndMessages() {\n    const { data } = this.state;\n    const { userUniqueID } = this.props;\n    const currentRoomId = data.getIn([\"activeRoom\", \"key\"]);\n\n    return (\n      // if we have a current room, render it with the messages\n      <React.Fragment>\n        {!currentRoomId ? (\n          // TODO: create a component\n          <h2>Please select a room!</h2>\n        ) : (\n          // renders all messages associated with the roomID\n          data.get(\"messages\").map((message: any) => [\n            currentRoomId === message.roomId && (\n              <MessageList\n                key={message.roomId + 1}\n                // props\n                avatar={message.avatar}\n                currentUser={userUniqueID}\n                content={message.content}\n                deleteMessage={(event: any) => {\n                  this.handleRemoveMessageFromFirebase(event, message.key);\n                }}\n                id={message.roomId + 1}\n                sentAt={message.sentAt}\n                userId={message.userId}\n                username={message.username}\n              />\n            )\n          ])\n        )}\n      </React.Fragment>\n    );\n  }\n\n  // main render function of the app\n  render() {\n    const { data, newMessage } = this.state;\n\n    return (\n      <main className=\"chatrooms-container\" role=\"main\">\n        <aside className=\"chatrooms-container__side-container\">\n          <ProfileCard {...this.props} />\n          <article>{this.renderCreateChatRooms()}</article>\n          <article>{this.renderChatRooms()}</article>\n        </aside>\n        <section className=\"chatrooms-container__main-container\">\n          <header className=\"chatrooms-container__chatroom-header\">\n            <h2>{data.getIn([\"activeRoom\", \"name\"])}</h2>\n          </header>\n          <section className=\"message-container\">\n            {this.renderActiveRoomsAndMessages()}\n            <span\n              ref={(span: any) => {\n                this.scrollToEndOfMessages = span;\n              }}\n            />\n          </section>\n          {data.getIn([\"activeRoom\", \"key\"]).length > 0 && (\n            <CreateMessage\n              // TODO: rethink on how to incorporate without Lambda\n              // Lambdas are forbidden in JSX attributes due to their\n              // rendering performance impact\n              handleChange={(event: any) => this.handleMessageContent(event)}\n              handleSubmit={(event: any) =>\n                this.handleSendMessageToFirebase(event)\n              }\n              placeholder={`Send a message to '${data.getIn([\n                \"activeRoom\",\n                \"name\"\n              ])}'`}\n              value={newMessage}\n            />\n          )}\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default Rooms;\ntry {\n    // @ts-ignore\n    Rooms.displayName = \"Rooms\";\n    // @ts-ignore\n    Rooms.__docgenInfo = { \"description\": \"\", \"displayName\": \"Rooms\", \"props\": { \"avatar\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"avatar\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"displayImage\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"displayImage\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"displayName\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"displayName\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"firebase\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"firebase\", \"required\": false, \"type\": { \"name\": \"any\" } }, \"name\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"name\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"logout\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"logout\", \"required\": false, \"type\": { \"name\": \"any\" } }, \"userUniqueID\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"userUniqueID\", \"required\": false, \"type\": { \"name\": \"string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/containers/ChatRooms/ChatRooms.tsx#Rooms\"] = { docgenInfo: Rooms.__docgenInfo, name: \"Rooms\", path: \"src/containers/ChatRooms/ChatRooms.tsx#Rooms\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"
      ]
    }
  ]
}
